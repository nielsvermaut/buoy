buoy:
  version: 1

  # Allows you to run scripts in docker containers on certain events/hooks. This is very much like the docker-compose.yml
  # with the  key change that we define when to run the scripts, instead of having to run them all separately or running
  # them all on docker-compose up -d.
  #
  # A good usecase for scripts, is after the database has been created, you can run your fixtures against it.
  # WARNING: This is not implemented yet!
  scripts:
    run_fixtures:

      # The docker container that needs to be run. If you want a docker container that you have just built, use the buoy
      # variable notation and run the "buoy file replace". E.g. put {% DOCKER_CONTAINER_URL %} as docker_container, then
      # in your build system run "buoy file replace buoy.yml --parameter DOCKER_CONTAINER_URL --value [YOUR CONTAINER URL]"
      docker_container: nginx:latest

      # Orders the container to be run at a certain time. If not set, it will be 999
      order: 1

      # The command that needs to be executes
      command: /bin/sh

      # Mounts volumes into the container. This is only for files that exist in your repo, do not use this
      # for container-in-container mounting.
      volumes: []

      # The env_file exposed to the script.
      env_file: buoy.env

      # The events/hooks the command will be run on.
      # Available events/hooks: before_spinup, after_spinup, before_cleanup, after_cleanup
      runs_on:
        - 'before_spinup'

      # Allows you to group commands and run them via "buoy commands run-group [YOUR GROUP NAME]". If no group is defined,
      # commands are assigned to the group "default". When you run the "buoy commands run-group [YOUR GROUP NAME]", there
      # will be no concern given for the runs_on setting.
      group: my_commands_group


  # Runs good ol' classic webhooks.
  webhooks:
    custom_webhook:

      # Where does the webhook need to be sent
      url: https://example.com/webhook

      # Payload we'll send in the POST data, only applicable on method POST. You can use the buoy variable
      # notation here as well.
      payload: {"payload_to_be_send": "{% PAYLOAD_DATA %}"}

      # How do we send the webhook, only GET and POST are supported
      method: POST

      #Allows you to set headers
      headers:
        Authorization: "Bearer {% WEBHOOK_TOKEN %}"

      # Allows you to order the webhooks, if not set, it will be 999
      order: 1

      # The events/hooks the command will be run on.
      # Available events/hooks: before_spinup, after_spinup, before_cleanup, after_cleanup
      runs_on:
        - 'after_spinup'

      # If set to true, we'll send the database_name and owner with the webhook on respectively the key
      # "buoy_database_name" and "buoy_database_owner". This will only work on "after_spinup".
      include_context: false


    # Allows you to fetch files. It is possible to overwrite the buoy.yml file, if you run buoy files fetch on the
    # first step in your build orchestrator.
    files:

      # Files fetched when running buoy files fetch for all files, or buoy files fetch-group [GROUP]
      some_file:

        # Where is the file accessable
        url: https://example.com/great.zip

        #Allows you to set headers
        headers:
          Authorization: "Bearer {% WEBHOOK_TOKEN %}"

        # Where does the file need to be stored relative to the project root. If you use a single file, this has to represent that path
        # e.g. ./file.yaml. If it is a zip, it can represent a folder e.g. ./extract. Buoy will not create subfolders for you, so
        # make sure that any paths already exist. e.g. if the target is ./static/file.yaml, the ./static folder has to already
        # exist.
        target: ./static

        # If the file is a zip file, we can unzip it on the target.
        unzip: true

        # Similar to the group section to the scripts
        group: static_content